1장 웹 프로젝트의 이해
크롬으(표준)로 만들고 익스로도 만든다.
(HTML5 지원점수가 제일 높다)

*SI (고객요청에 따라 구축)  ,  Solution (프로그램이 기준이고 배포)
프로그램이 완성 x
기획
설계
구축 [ Developer(기능 구현) = junior]
*SM
프로그램이 완성 o
유지(운용) 
보수 

*XML + HTML
설정용 포맷
가독성 높음, 무게 무거움, 속도 느림
1. 로드시 1번만
2. 복잡한 것에 씀

*Json
전송용 포맷
가독성 낮음, 무게 가벼움, 속도 빠름




Repository (= DAO)

JSTL (jsp standard 
=> <c:forEach> 


jQuery
자바스크립트의 라이브러리( 함수 몸: 함수가 모여있다 )
document.getElementBy Id ("a ");
&   ( "#  a  " );


Controller ( 요청을 제어 )
요청을 한곳으로 받는다.( 공통 작업을 하는 곳 )



service
<DB까지 안가도 되는 것들은 dao 안가고 service에서 끝낸다>

dao (data access object)


Mydatis (SQL mapper)  <DBA>
트랜잭션 역할



내부와 외부의 연결고리 <너와 나의 연결고리>
(ex. 게임의 조이스틱)


*명세적 특징 + 강력한 규범
데이터 타입과 파라미터를 반드시 지켜줘야 함
*1:N구조

autowied (자동으로 연결한다.)
인자로 나눈다. 어디서 왔는지를 service에서 체크해서
새로 만든다.

extends 보다 interface를 더 선호함.

배포를 해서 CLI에서 실행한다.
기능이 적어서 속도가 빠르고 보안이 좋다.




interface는 쉽게 끊을 수 있다. (느슨하게 연결할 수 있다)

오버라이드 (재정의)


오버로드 (중복정의)


void 타입인 메서드에서도 return; 이렇게만 쓰면 사용 가능 (=exit)

*API (응용 프로그래밍과의 연결 고리) = 기능 만들어라.
주소를 호출할 수 있는 

이클립스 편집툴이랑 api Document 연결해두기
(API 문서 보는것 습관화 하기)


protocol (통신규약)
TCP
응답이 있다.(내가 전송 결과를 알수 있다)
채팅형 (1:1)  

UDP
응답이 없다. (내가 전송 결과를 알수 없다)
푸쉬 (1:N)



***************
TCP, UDP 예제 만들기.

9장 함수형에 채널 소켓 관련 예제 보기
***



promise, asyncwait???

자바스크립스는 sop (Same Origin Policy) 라 서로 다른 url(도메인)로 

비동기 연결이 안된다

해서 java 경유를 주로 쓴다.

=> 그냥 웹소켓을 쓰면 된다. (SOP에 구애 받지 않는다)


******
Web Socket 만들어 보기





*******************************************
Thread
작은 일을 많이 할 때 쪼갠다.
큰 일을 할 때는 합친다.
main thread 메인 쓰레드
demon thread 자식 쓰레드임


교착상태에 주의 (dead lock)
- 순서가 꼬여 원하는 일을 자신이 서로 먼저 끝내려고 할때 대기상태가 되버림(정지)


*****Thread 예제 만들기
(Runnable 이 더 유연하다)



*STATIC
제일 먼저 만들어짐(실행됨), 고정된 공유자원

juit을 쓰면 test를 대신 할 수 있다.

* [ Singleton 패턴 ]
Spring은 [ Singleton 패턴 ]으로 만들어진다.
=> 객체에 대한 제어권이 누구한테 있냐의 차이

* [ IOC ]
프레임워크와 라이브러리의 차이 ( 의 차이 임벌젼 오브 컨트롤)
=> 제어권이 상대한테 넘어간다.
-라이브러리는 함수(기능)의 모음집이다. 연장(기능)통이다.

-(개발자의 코딩이) 프레임(틀)에 맞춰 워크(일)한다.




* 규격화와 반복작업이 이루어 지키 때문에 프레임워크를 만들어 사용하게 되었다.


* POJO (Plane Old Java Object 평범한 구식 자바 객체)
내가 코딩할 비즈니스 로직만 쓰고 나머지는 스프링이 한다.


*완성된 코드는 건드리지 않는다 DI
<느슨한 연결 구조 = 의존 관계를 주입(파라미터)한다.>

*AOP (aspected oriented project)
 (횡단 관심사 =  중복)
Refactoring 
=> 외부 동작을 바꾸지 않으면서 내부 구조를 개선 하는 방법임.
로깅
보안
트랜잭션
로그 파일로 남기는게 로깅임.
트랜잭션은 모든 로직에 걸려야 함

//////////////////////////////////////////
spring 설정파일이나, xml 파일을 뒤져보면
aop 적용된 걸 찾아낼 수 있다
//////////////////////////////////////////










